# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "25s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will cache metric_buffer_limit metrics for each output, and will
  ## flush this buffer on a successful write.
  metric_buffer_limit = 10000
  ## Flush the buffer whenever full, regardless of flush_interval.
  flush_buffer_when_full = true

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "1s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## Run telegraf in debug mode
  debug = false
  ## Run telegraf in quiet mode
  quiet = false
  ## Override default hostname, if empty use os.Hostname()
  hostname = ""


###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

# Configuration for influxdb server to send metrics to
 [[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]

  ## API token for authentication.
  token = "${TOKEN}"

  ## Organization is the name of the organization you wish to write to; must exist.
  organization = "${ORG}"

  ## Destination bucket to write into.
  bucket = "${BUCKET}"



######################################################
#                    MIXNODE                         #
######################################################
[[inputs.http]]
    urls = ["http://194.182.166.226:8000/stats"]
    data_format = "json_v2"
    [inputs.http.tags]
      mixnode = "ntv"
    [[inputs.http.json_v2]]
         [[inputs.http.json_v2.field]]
            path = "packets_received_since_startup"
         [[inputs.http.json_v2.field]]
            path = "packets_sent_since_startup"
         [[inputs.http.json_v2.field]]
            path = "packets_explicitly_dropped_since_startup"
         [[inputs.http.json_v2.field]]
            path = "packets_received_since_last_update"
         [[inputs.http.json_v2.field]]
            path = "packets_sent_since_last_update"
         [[inputs.http.json_v2.field]]
            path = "packets_explicitly_dropped_since_last_update"
         [[inputs.http.json_v2.field]]
            path = "update_time"


[[inputs.http]]
    urls = ["https://validator.nymtech.net/api/v1/status/mixnode/<mixnode identity key>/reward-estimation"]
    interval = "10m"
    data_format = "json_v2"
    [inputs.http.tags]
      mixnode = "ntv"
    [[inputs.http.json_v2]]
         [[inputs.http.json_v2.field]]
            path = "estimated_total_node_reward"
         [[inputs.http.json_v2.field]]
            path = "estimated_operator_reward"
         [[inputs.http.json_v2.field]]
            path = "estimated_delegators_reward"
         [[inputs.http.json_v2.field]]
            path = "reward_params.node.uptime"
	    rename = "uptime1"
            type = "int"
         [[inputs.http.json_v2.field]]
            path = "reward_params.node.in_active_set"
            rename = "active"
         [[inputs.http.json_v2.field]]
            path = "reward_params.node.reward_blockstamp"
	    rename = "reward_blockstamp"

[[inputs.http]]
    urls = ["https://validator.nymtech.net/api/v1/status/mixnode/<mixnode identity key>/report"]
    interval = "10m"
    data_format = "json_v2"
    [inputs.http.tags]
      mixnode = "ntv"
    [[inputs.http.json_v2]]
         [[inputs.http.json_v2.field]]
            path = "most_recent"
            rename = "report_uptime"
            type = "int"
         [[inputs.http.json_v2.field]]
            path = "last_hour"
            rename = "report_last_hour"
	    type = "int"
         [[inputs.http.json_v2.field]]
            path = "last_day"
            rename = "report_last_day"
            type = "int"
         [[inputs.http.json_v2.field]]
            path = "avg_uptime"
	    type = "float"


[[inputs.http]]
    urls = ["https://explorer.nymtech.net/api/v1/mix-node/<mixnode identity key>"]
    interval = "10m"
    data_format = "json_v2"
    [inputs.http.tags]
      mixnode = "ntv"
    [[inputs.http.json_v2]]
         [[inputs.http.json_v2.field]]
            path = "total_delegation.amount"
	    rename = "total_delegation"
            type = "int"
         [[inputs.http.json_v2.field]]
	    path = "saturation"
            type = "float"

[[inputs.http]]
    urls = ["https://mixnet.api.explorers.guru/api/mixnodes/<mixnode identity key>"]
    interval = "10m"
    data_format = "json_v2"
    [inputs.http.tags]
      mixnode = "ntv"
    [[inputs.http.json_v2]]
         [[inputs.http.json_v2.field]]
	    path = "mixnode.accumulated_rewards"
            rename = "accumulated_rewards"
            type = "float"

[[inputs.http]]
    urls = ["https://mixnet.api.explorers.guru/api/mixnodes"]
    interval = "30m"
    data_format = "json_v2"
    [inputs.http.tags]
      mixnode = "ntv"
    [[inputs.http.json_v2]]
         [[inputs.http.json_v2.field]]
	    path = "#(identityKey==<mixnode identity key>).apy"
            rename = "apy"
            type = "float"



######################################################
#                    GATEWAY                         #
######################################################
[[inputs.http]]
    urls = ["https://validator.nymtech.net/api/v1/status/gateway/<gateway identity key>/core-status-count"]
    interval = "10m"
    data_format = "json_v2"
    [inputs.http.tags]
      gateway = "ntv"
    [[inputs.http.json_v2]]
         [[inputs.http.json_v2.field]]
	    path = "count"
            rename = "count"
            type = "int"


